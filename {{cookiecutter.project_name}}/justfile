# List available commands
list:
    @just --list --unsorted

# Development setup
bootstrap:
    uv sync
    uv run pre-commit install

# Install the project in development mode
install: bootstrap

# Run tests
test *args:
    uv run pytest {{ "{{" }}args{{ "}}" }}

# Run tests with coverage
test-coverage:
    {% if cookiecutter.codecov == 'y' -%}
    uv run pytest --cov --cov-config=pyproject.toml --cov-report=xml --cov-report=term
    {%- else -%}
    uv run pytest
    {%- endif %}

# Run tests in debug mode
test-watch *args:
    uv run pytest --pdb {{ "{{" }}args{{ "}}" }}

# Format code with ruff
fix:
    uv run ruff format .
    uv run ruff check --fix .

# Code quality
quality: fix lint

# Lint code with ruff
lint:
    uv run ruff check .

# Pre-commit
pre-commit:
    uv run pre-commit run --all-files

# Serve documentation locally
docs-serve:
    {% if cookiecutter.mkdocs == 'y' -%}
    uv run mkdocs serve
    {%- endif %}

# Build and deploy documentation
docs-build:
    {% if cookiecutter.mkdocs == 'y' -%}
    uv run mkdocs gh-deploy --force
    {%- endif %}

# Database operations
db-migrate:
    @echo "Database migration placeholder - implement as needed"

db-reset:
    @echo "Database reset placeholder - implement as needed"

# Docker operations
docker-up:
    @echo "Docker compose up placeholder - implement as needed"

docker-down:
    @echo "Docker compose down placeholder - implement as needed"

# Check for unused dependencies
deps-check:
    {% if cookiecutter.deptry == 'y' -%}
    uv run deptry .
    {%- endif %}

# Run playwright tests
playwright:
    uv run python -m playwright install
    uv run python -m pytest tests/playwright/

# Print project version
version:
    @grep "^version" pyproject.toml | cut -d'"' -f2